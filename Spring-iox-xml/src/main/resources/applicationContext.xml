<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

    <!-- 实验一 [重要]创建bean -->
    <!--bean标签：通过配置bean标签告诉ioc容器需要创建对象的组件是什么 -->
    <!--id属性：bean的唯一标识。class属性：组件类的全类名 -->
    <!--    <bean id="testComponent" class="com.yjl.ioc.component.TestComponent"/>-->


    <!--给bean属性赋值  setter注入 -->
    <bean id="'testComponent" class="com.yjl.ioc.component.TestComponent">
        <!-- property标签：通过组件类的setXxx()方法给组件对象设置属性 -->
        <!-- name属性：指定属性名（这个属性名是getXxx()、setXxx()方法定义的，和成员变量无关） -->
        <!-- value属性：指定属性值 -->
        <property name="name" value="i am happy"/>
    </bean>

    <!--给bean的属性赋值，引用外部已声明的bean -->
    <bean id="testMachine" class="com.yjl.ioc.component.TestMachine">
        <property name="machineName" value="makeHappy"/>
    </bean>
    <bean id="testComponentAndMachine" class="com.yjl.ioc.component.TestComponent">
        <!--使用外部已经配置好的testMachine这个bean来给当前组件的赋值 -->
        <!-- ref 属性：通过 bean 的 id 引用另一个 bean -->
        <!--如果错把ref属性写成了value属性，会抛出如下异常：
         Caused by: java.lang.IllegalStateException:
          Cannot convert value of type 'java.lang.String' to required type 'com.yjl.ioc.component.HappyMachine' for property 'happyMachine': no matching editors or conversion strategy found
          意思是不能把String类型转换成我们要的HappyMachine类型
          说明我们使用value属性时，Spring只把这个属性看做一个普通的字符串， 不会认为这是一个bean的id，更不会根据它去找到bean来赋值 -->
        <property name="testMachine" ref="testMachine"/>
    </bean>

    <!--给bean的属性赋值：内部bean
    在bean里面配置的bean就是内部bean，内部bean只能在当前bean内部使用，在其他地方不能使用-->
    <bean id="happyComponent5" class="com.yjl.ioc.component.TestComponent">
        <property name="testMachine">
            <!-- 在一个 bean 中再声明一个 bean 就是内部 bean -->
            <!-- 内部 bean 可以直接用于给属性赋值，可以省略 id 属性 -->
            <bean class="com.yjl.ioc.component.TestMachine">
                <property name="machineName" value="makeHappy"/>
            </bean>
        </property>
    </bean>

    <!-- 引入外部属性文件 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!-- 实验六 [重要]给bean的属性赋值：引入外部属性文件 -->
    <bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="url" value="${jdbc.url}"/>
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="username" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!-- 实验七 给bean的属性赋值：级联属性赋值 -->
    <bean id="testMachine2" class="com.yjl.ioc.component.TestMachine"/>
    <bean id="testComponent6" class="com.yjl.ioc.component.TestComponent">
        <!-- 装配关联对象 -->
        <property name="testMachine" ref="testMachine2"/>
        <!-- 对HappyComponent来说，happyMachine的machineName属性就是级联属性 -->
        <property name="testMachine.machineName" value="cascadeValue"/>
    </bean>

    <!-- 实验八 给bean的属性赋值：构造器注入 -->
    <!--constructor-arg标签还有两个属性可以进一步描述构造器参数：
        index属性：指定参数所在位置的索引（从0开始）
        name属性：指定参数名 -->
    <!--    <bean id="testTeam" class="com.yjl.ioc.component.TestTeam">-->
    <!--        <constructor-arg value="happyCorps"/>-->
    <!--        <constructor-arg value="10"/>-->
    <!--        <constructor-arg value="1000.55"/>-->
    <!--    </bean>-->

    <!-- 实验十三 集合类型的bean -->
    <bean id="happyTeam2" class="com.yjl.ioc.component.TestTeam">
        <property name="memberList">
            <!-- list标签：准备一组集合类型的数据，给集合属性赋值 -->
            <!--<list>
                <value>member01</value>
                <value>member02</value>
                <value>member03</value>
            </list>-->
            <!-- 使用set标签也能实现相同效果，只是附带了去重功能 -->
            <!--<set>
                <value>member01</value>
                <value>member02</value>
                <value>member02</value>
            </set>-->
            <!-- array也同样兼容 -->
            <array>
                <value>member01</value>
                <value>member02</value>
                <value>member02</value>
            </array>
        </property>
        <property name="managerList">
            <!-- 给Map类型的属性赋值 -->
            <map>
                <entry key="财务部" value="张三"/>
                <entry key="行政部" value="李四"/>
                <entry key="销售部" value="王五"/>
            </map>
            <!-- 也可以使用props标签 -->
            <!--            <props>-->
            <!--                <prop key="财务部">张三2</prop>-->
            <!--                <prop key="行政部">李四2</prop>-->
            <!--                <prop key="销售部">王五2</prop>-->
            <!--            </props>-->
        </property>
    </bean>

    <!-- 实验十二 自动装配 -->
    <bean id="testService3" class="com.yjl.ioc.component.TestService"/>
    <bean id="testService2" class="com.yjl.ioc.component.TestService"/>

    <!-- 使用bean标签的autowire属性设置自动装配效果 -->
    <!-- byType表示根据类型进行装配，此时如果类型匹配的bean不止一个，那么会抛NoUniqueBeanDefinitionException -->
    <!-- byName表示根据bean的id进行匹配。而bean的id是根据需要装配组件的属性的属性名来确定的 -->

    <!--    <bean id="testController"-->
    <!--          class="com.yjl.ioc.component.TestController"-->
    <!--          autowire="byName">-->
    <!--        &lt;!&ndash; 手动装配：在property标签中使用ref属性明确指定要装配的bean &ndash;&gt;-->
    <!--        <property name="testService" ref="testService2"/>-->
    <!--    </bean>-->

    <!-- 实验十四 FactoryBean机制 -->
    <!-- 这个bean标签中class属性指定的是HappyFactoryBean，但是将来从这里获取的bean是HappyMachine对象 -->
    <bean id="testMachine3" class="com.yjl.ioc.factory.TestFactoryBean">
        <!-- property标签仍然可以用来通过setXxx()方法给属性赋值 -->
        <property name="machineName" value="iceCreamMachine"/>
    </bean>
    <!-- 实验十五 bean的作用域 -->
    <!-- scope属性：取值singleton（默认值），bean在IOC容器中只有一个实例，IOC容器初始化时创建对象 -->
    <!-- scope属性：取值prototype，bean在IOC容器中可以有多个实例，getBean()时创建对象 -->
    <bean id="happyMachine4" scope="prototype" class="com.yjl.ioc.component.TestMachine">
        <property name="machineName" value="iceCreamMachine"/>
    </bean>
</beans>